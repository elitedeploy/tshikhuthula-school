---
export interface Props {
  containerId: string;
  itemSelector: string;
  itemsPerPage?: number;
  paginationId?: string;
  infoId?: string;
  itemName?: string;
}

const { 
  containerId, 
  itemSelector, 
  itemsPerPage = 6, 
  paginationId = 'paginationList', 
  infoId = 'paginationInfo',
  itemName = 'items'
} = Astro.props;
---

<!-- Pagination -->
<div class="row mt-5">
    <div class="col-12 text-center">
        <nav aria-label="Pagination" id={`${paginationId}Nav`}>
            <ul class="pagination justify-content-center" id={paginationId}>
                <!-- Pagination will be dynamically generated -->
            </ul>
        </nav>
        <div class="mt-3">
            <small class="text-muted" id={infoId}>Loading...</small>
        </div>
    </div>
</div>

<script define:vars={{ containerId, itemSelector, itemsPerPage, paginationId, infoId, itemName }}>
    document.addEventListener('DOMContentLoaded', function() {
        const container = document.getElementById(containerId);
        const paginationList = document.getElementById(paginationId);
        const paginationInfo = document.getElementById(infoId);
        const paginationNav = document.getElementById(`${paginationId}Nav`);
        
        if (!container) return;
        
        const items = Array.from(container.querySelectorAll(itemSelector));
        let filteredItems = [...items];
        let currentPage = 1;

        function showCurrentPage() {
            // Hide all items
            items.forEach(item => {
                item.style.display = 'none';
            });

            // Calculate start and end indices
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            // Show items for current page
            const itemsToShow = filteredItems.slice(startIndex, endIndex);
            itemsToShow.forEach(item => {
                item.style.display = 'block';
            });

            // Update pagination info
            const totalItems = filteredItems.length;
            const showingStart = totalItems > 0 ? startIndex + 1 : 0;
            const showingEnd = Math.min(endIndex, totalItems);
            
            if (paginationInfo) {
                paginationInfo.textContent = `Showing ${showingStart}-${showingEnd} of ${totalItems} ${itemName}`;
            }
        }

        function updatePagination() {
            if (!paginationList) return;

            const totalPages = Math.ceil(filteredItems.length / itemsPerPage);
            paginationList.innerHTML = '';

            if (totalPages <= 1) {
                // Hide pagination if only one page or no items
                if (paginationNav) {
                    paginationNav.style.display = 'none';
                }
                return;
            } else {
                if (paginationNav) {
                    paginationNav.style.display = 'block';
                }
            }

            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            const prevLink = document.createElement('a');
            prevLink.className = 'page-link';
            prevLink.href = '#';
            prevLink.textContent = 'Previous';
            prevLink.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    updatePagination();
                    showCurrentPage();
                }
            });
            prevLi.appendChild(prevLink);
            paginationList.appendChild(prevLi);

            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                const li = document.createElement('li');
                li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                const link = document.createElement('a');
                link.className = 'page-link';
                link.href = '#';
                link.textContent = i.toString();
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    currentPage = i;
                    updatePagination();
                    showCurrentPage();
                });
                li.appendChild(link);
                paginationList.appendChild(li);
            }

            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            const nextLink = document.createElement('a');
            nextLink.className = 'page-link';
            nextLink.href = '#';
            nextLink.textContent = 'Next';
            nextLink.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage < totalPages) {
                    currentPage++;
                    updatePagination();
                    showCurrentPage();
                }
            });
            nextLi.appendChild(nextLink);
            paginationList.appendChild(nextLi);
        }

        // Function to update filtered items (can be called externally)
        window.updatePaginationItems = function(newFilteredItems) {
            filteredItems = newFilteredItems;
            currentPage = 1;
            updatePagination();
            showCurrentPage();
        };

        // Initialize pagination
        updatePagination();
        showCurrentPage();
    });
</script>